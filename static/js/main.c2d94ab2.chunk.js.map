{"version":3,"sources":["App.js","components/card.js","components/Jumbotron.js","index.js"],"names":["answer","choices","Card","PropTypes","string","strings","photo","name","className","style","width","onClick","handle","src","alt","event","preventDefault","push","target","temp","console","log","i","length","holder","indexOf","reInit","verdict","decision","randomize","Jumbotron","score","correct","number","array","characters","map","info","index","image","App","updated","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"4xDAWIA,E,8DCPAC,EAAU,GAODC,GAJFC,IAAUC,OACXD,IAAUE,QAGA,SAAC,GAAD,IAChBC,EADgB,EAChBA,MADgB,EAEhBC,KAFgB,OAKhB,yBAAKC,UAAU,aAAaC,MAAO,CAACC,MAAO,SAAUC,QAASC,GAC1D,yBAAKJ,UAAU,eAAeK,IAAKP,EAAOQ,IAAI,mBAC9C,yBAAKN,UAAU,iBAajBI,EAAS,SAACG,GAEZA,EAAMC,iBAKNf,EAAQgB,KAAKF,EAAMG,OAAOL,KAC1B,IAAIM,EAAO,GACXC,QAAQC,IAAIpB,GAEZ,IAAK,IAAIqB,EAAI,EAAGA,EAAIrB,EAAQsB,OAAQD,IAAI,CACpC,IAAIE,EAASvB,EAAQqB,GAErB,IAA8B,IAA1BH,EAAKM,QAAQD,GAAe,CAC5BL,EAAO,GACPlB,EAAU,GACVyB,IAEAC,GAAQ,GACR,MAEJR,EAAKF,KAAKO,GAGdG,GAAQ,IAKCA,EAAU,SAACC,IACH,IAAbA,EACAR,QAAQC,IAAI,aAKZQ,KCvCOC,EAjBG,SAAC,GAAD,IACdC,EADc,EACdA,MACAC,EAFc,EAEdA,QAFc,OAId,yBAAKxB,UAAU,aACX,wCAAa,6BAAb,sCACA,qCAAWuB,EAAX,aAA4BC,K,OFThCC,GAAU,EACRC,EAAQ,GAOZC,EAAWC,KAAI,SAACC,EAAMC,GACpB,OACIJ,EAAMjB,KAAKoB,EAAKE,UAUjB,IA4BDC,EAAM,kBAGV,yBAAKhC,UAAY,mBACf,kBAAC,EAAD,CACEuB,OA7BF/B,EADa,KAFfiC,GAAQ,GAGG,aAEQ,KAAXA,EACG,qBAIA,WAGJA,GAoBHD,QAAWhC,IAIb,yBAAKQ,UAAY,OAGd0B,EAAME,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEhC,MAAS+B,UAeRR,EAAY,WAGvB,IAFA,IAAIY,EACAtB,EACKG,EAAIY,EAAMX,OAAS,EAAGD,EAAI,EAAGA,IACpCmB,EAAUC,KAAKC,MAAMD,KAAKE,UAAYtB,EAAI,IAC1CH,EAAOe,EAAMZ,GACbY,EAAMZ,GAAKY,EAAMO,GACjBP,EAAMO,GAAWtB,EAInB0B,IAASC,OAAON,IAAOO,SAASC,eAAe,UAGjDnB,IAIO,IAAMH,EAAS,WAEpBO,GAAU,EAEVY,IAASC,OAAON,IAAOO,SAASC,eAAe,UAkBlCR,IG1HfK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c2d94ab2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\n\r\n\r\nimport {Card, verdict} from \"./components/card\";\r\nimport Jumbotron from \"./components/Jumbotron\"\r\nimport characters from \"./characters.json\"\r\n\r\nlet number = -2;\r\nconst array = [];\r\nlet answer;\r\nlet newGame = 0;\r\n\r\n\r\nconst arrayLinks = () => (\r\n\r\n  characters.map((info, index) => {\r\n    return(\r\n        array.push(info.image)\r\n      \r\n    )\r\n\r\n\r\n\r\n  })\r\n);\r\narrayLinks()\r\n\r\nexport const scor = () => {\r\n  number+=1\r\n  \r\n  if( number === 0 ){\r\n    answer = \"GOOD LUCK!\"\r\n  }\r\n  else if(number === 10){\r\n    answer = \"WOMBOOOO COMBOOOO!\"\r\n  }\r\n  \r\n  else{\r\n    answer = \"CORRECT!\"\r\n  }\r\n  \r\n  return number;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => (\r\n  \r\n  \r\n  <div className = \"container-fluid\">\r\n    <Jumbotron\r\n      score = {scor()}\r\n      correct = {answer}\r\n    />\r\n\r\n\r\n    <div className = \"row\">\r\n      \r\n      \r\n      {array.map((info, index) => {\r\n        return(\r\n          <Card\r\n            photo = {info}\r\n          />\r\n      )\r\n      })}\r\n   </div>\r\n\r\n\r\n\r\n\r\n  </div>\r\n  \r\n\r\n\r\n);\r\n\r\nexport const randomize = () => {\r\n  let updated;\r\n  let temp;\r\n  for( let i = array.length - 1; i > 0; i--){\r\n    updated = Math.floor(Math.random() * (i + 1))\r\n    temp = array[i];\r\n    array[i] = array[updated];\r\n    array[updated] = temp;\r\n\r\n    \r\n  }\r\n  ReactDOM.render(App(), document.getElementById('root'));\r\n  \r\n};\r\nrandomize()\r\n\r\n\r\n\r\nexport const reInit = () => {\r\n  newGame++\r\n  number = -2\r\n  \r\n  ReactDOM.render(App(), document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\nexport default App;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {randomize,reInit} from '../App.js'\r\n\r\nlet choices = [];\r\n\r\nconst propTypes = {\r\n    photo: PropTypes.string,\r\n    name: PropTypes.strings\r\n}\r\n\r\nexport const Card = ({\r\n    photo,\r\n    name\r\n}) => (\r\n    \r\n    <div className=\"col-2 card\" style={{width: \"18rem\"}} onClick={handle}>\r\n        <img className=\"card-img-top\" src={photo} alt=\"Card image cap\"></img>\r\n        <div className=\"card-body\">\r\n\r\n        </div>\r\n    </div>\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n);\r\n\r\n\r\nconst handle = (event) => {\r\n    \r\n    event.preventDefault();\r\n   \r\n    \r\n\r\n\r\n    choices.push(event.target.src)\r\n    let temp = [];\r\n    console.log(choices)\r\n\r\n    for (let i = 0; i < choices.length; i++){\r\n        let holder = choices[i];\r\n\r\n        if (temp.indexOf(holder) !== -1){\r\n            temp = [];\r\n            choices = [];\r\n            reInit();\r\n            \r\n            verdict(true);\r\n            break;\r\n        }\r\n        temp.push(holder);\r\n        \r\n    }\r\n    verdict(false);\r\n    \r\n};\r\n\r\n\r\nexport const verdict = (decision) => {\r\n    if( decision === true){\r\n        console.log(\"DUPLICATE\")\r\n        \r\n        \r\n    }\r\n    else{\r\n        randomize();\r\n    }\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    score: PropTypes.integer,\r\n    correct: PropTypes.string\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst Jumbotron = ({\r\n    score,\r\n    correct\r\n}) =>(\r\n    <div className=\"jumbotron\">\r\n        <h1>FUTURAMA:<br></br> Don't Click The Same Image Twice!</h1>\r\n        <p>Score: {score}        : {correct}</p> \r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n)\r\n\r\nJumbotron.propTypes = propTypes;\r\nexport default Jumbotron;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}